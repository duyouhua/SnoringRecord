package com.ping.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import top.jplayer.audio.bean.RecordSleepBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_SLEEP_BEAN".
*/
public class RecordSleepBeanDao extends AbstractDao<RecordSleepBean, Long> {

    public static final String TABLENAME = "RECORD_SLEEP_BEAN";

    /**
     * Properties of entity RecordSleepBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Day = new Property(1, String.class, "day", false, "DAY");
        public final static Property StartTime = new Property(2, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, String.class, "endTime", false, "END_TIME");
        public final static Property SleepTime = new Property(4, String.class, "sleepTime", false, "SLEEP_TIME");
        public final static Property SleepSnoring = new Property(5, String.class, "sleepSnoring", false, "SLEEP_SNORING");
        public final static Property Account = new Property(6, String.class, "account", false, "ACCOUNT");
    }


    public RecordSleepBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecordSleepBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_SLEEP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DAY\" TEXT NOT NULL ," + // 1: day
                "\"START_TIME\" TEXT NOT NULL ," + // 2: startTime
                "\"END_TIME\" TEXT NOT NULL ," + // 3: endTime
                "\"SLEEP_TIME\" TEXT NOT NULL ," + // 4: sleepTime
                "\"SLEEP_SNORING\" TEXT NOT NULL ," + // 5: sleepSnoring
                "\"ACCOUNT\" TEXT NOT NULL );"); // 6: account
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_SLEEP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordSleepBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getDay());
        stmt.bindString(3, entity.getStartTime());
        stmt.bindString(4, entity.getEndTime());
        stmt.bindString(5, entity.getSleepTime());
        stmt.bindString(6, entity.getSleepSnoring());
        stmt.bindString(7, entity.getAccount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordSleepBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getDay());
        stmt.bindString(3, entity.getStartTime());
        stmt.bindString(4, entity.getEndTime());
        stmt.bindString(5, entity.getSleepTime());
        stmt.bindString(6, entity.getSleepSnoring());
        stmt.bindString(7, entity.getAccount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordSleepBean readEntity(Cursor cursor, int offset) {
        RecordSleepBean entity = new RecordSleepBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // day
            cursor.getString(offset + 2), // startTime
            cursor.getString(offset + 3), // endTime
            cursor.getString(offset + 4), // sleepTime
            cursor.getString(offset + 5), // sleepSnoring
            cursor.getString(offset + 6) // account
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordSleepBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDay(cursor.getString(offset + 1));
        entity.setStartTime(cursor.getString(offset + 2));
        entity.setEndTime(cursor.getString(offset + 3));
        entity.setSleepTime(cursor.getString(offset + 4));
        entity.setSleepSnoring(cursor.getString(offset + 5));
        entity.setAccount(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordSleepBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordSleepBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordSleepBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
